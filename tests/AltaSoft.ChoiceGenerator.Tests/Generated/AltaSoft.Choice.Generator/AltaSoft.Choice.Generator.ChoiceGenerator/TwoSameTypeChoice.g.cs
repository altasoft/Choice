//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Choice.Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using AltaSoft.ChoiceGenerator.Tests;
using AltaSoft.Choice;
using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.Schema;

namespace AltaSoft.ChoiceGenerator.Tests;

#pragma warning disable CS8774 // Member must have a non-null value when exiting.
#pragma warning disable CS0628 // New protected member declared in sealed type

public sealed partial class TwoSameTypeChoice
{
    [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
    public TwoSameTypeChoice()
    {
    }

    /// <summary>
    /// <para>Choice enum </para>
    /// </summary>
    [JsonIgnore]
    [XmlIgnore]
    public ChoiceOf ChoiceType { get; private set; }

    private string? _stringChoiceOne;

    [DisallowNull]
    [XmlElement("StringChoiceOne")]
    public partial string? StringChoiceOne
    {
        get => _stringChoiceOne;
        set
        {
            _stringChoiceOne = value ?? throw new InvalidOperationException("Choice value cannot be null");
            _stringChoiceTwo = null;
            ChoiceType = ChoiceOf.StringChoiceOne;
        }
    }

    private string? _stringChoiceTwo;

    [DisallowNull]
    [XmlElement("StringChoiceTwo")]
    public partial string? StringChoiceTwo
    {
        get => _stringChoiceTwo;
        set
        {
            _stringChoiceTwo = value ?? throw new InvalidOperationException("Choice value cannot be null");
            _stringChoiceOne = null;
            ChoiceType = ChoiceOf.StringChoiceTwo;
        }
    }


    /// <summary>
    /// Creates a new <see cref="AltaSoft.ChoiceGenerator.Tests.TwoSameTypeChoice"/> instance and sets its value using the specified <see cref="string"/>.
    /// </summary>
    /// <param name="value">The value to assign to the created choice instance.</param>
    public static AltaSoft.ChoiceGenerator.Tests.TwoSameTypeChoice CreateAsStringChoiceOne(string value) => new () { StringChoiceOne = value };

    /// <summary>
    /// Creates a new <see cref="AltaSoft.ChoiceGenerator.Tests.TwoSameTypeChoice"/> instance and sets its value using the specified <see cref="string"/>.
    /// </summary>
    /// <param name="value">The value to assign to the created choice instance.</param>
    public static AltaSoft.ChoiceGenerator.Tests.TwoSameTypeChoice CreateAsStringChoiceTwo(string value) => new () { StringChoiceTwo = value };

    /// <summary>
    /// <para>Applies the appropriate function based on the current choice type</para>
    /// </summary>
    /// <typeparam name="TResult">The return type of the provided match functions</typeparam>
    /// <param name="matchStringChoiceOne">Function to invoke if the choice is a <see cref="ChoiceOf.StringChoiceOne"/> value</param>
    /// <param name="matchStringChoiceTwo">Function to invoke if the choice is a <see cref="ChoiceOf.StringChoiceTwo"/> value</param>
    public TResult Match<TResult>(
    	Func<string, TResult> matchStringChoiceOne, 
    	Func<string, TResult> matchStringChoiceTwo)
    {
        return ChoiceType switch
        {
            ChoiceOf.StringChoiceOne => matchStringChoiceOne(StringChoiceOne!),
            ChoiceOf.StringChoiceTwo => matchStringChoiceTwo(StringChoiceTwo!),
            _ => throw new InvalidOperationException($"Invalid ChoiceType. '{ChoiceType}'")
        };
    }

    /// <summary>
    /// <para>Applies the appropriate Action based on the current choice type</para>
    /// </summary>
    /// <param name="matchStringChoiceOne">Action to invoke if the choice is a <see cref="ChoiceOf.StringChoiceOne"/> value</param>
    /// <param name="matchStringChoiceTwo">Action to invoke if the choice is a <see cref="ChoiceOf.StringChoiceTwo"/> value</param>
    public void Switch(
    	Action<string> matchStringChoiceOne, 
    	Action<string> matchStringChoiceTwo)
    {
        switch (ChoiceType)
        {
            case ChoiceOf.StringChoiceOne:
                matchStringChoiceOne(StringChoiceOne!);
                return;

            case ChoiceOf.StringChoiceTwo:
                matchStringChoiceTwo(StringChoiceTwo!);
                return;

            default:
            throw new XmlException($"Invalid ChoiceType. '{ChoiceType}'");
        }
    }


    /// <summary>
    /// <para>Choice enumeration</para>
    /// </summary>
    [XmlType("ChoiceOf.TwoSameTypeChoice")]
    public enum ChoiceOf
    {
        StringChoiceOne, 
        StringChoiceTwo, 
    }
}
