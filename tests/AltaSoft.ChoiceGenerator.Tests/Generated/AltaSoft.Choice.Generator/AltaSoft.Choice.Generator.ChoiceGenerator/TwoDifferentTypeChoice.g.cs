//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Choice.Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using AltaSoft.ChoiceGenerator.Tests;
using AltaSoft.Choice;
using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.Schema;

namespace AltaSoft.ChoiceGenerator.Tests;

#pragma warning disable CS8774 // Member must have a non-null value when exiting.
#pragma warning disable CS0628 // New protected member declared in sealed type

public sealed partial class TwoDifferentTypeChoice
{
    [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
    public TwoDifferentTypeChoice()
    {
    }

    /// <summary>
    /// <para>Choice enum </para>
    /// </summary>
    [JsonIgnore]
    [XmlIgnore]
    public ChoiceOf ChoiceType { get; private set; }

    private string? _stringChoice;

    [DisallowNull]
    [XmlElement("StringChoice")]
    public partial string? StringChoice
    {
        get => _stringChoice;
        set
        {
            _stringChoice = value ?? throw new InvalidOperationException("Choice value cannot be null");
            _intChoice = null;
            ChoiceType = ChoiceOf.StringChoice;
        }
    }

    private int? _intChoice;

    [DisallowNull]
    [XmlElement("IntChoice")]
    public partial int? IntChoice
    {
        get => _intChoice;
        set
        {
            _intChoice = value ?? throw new InvalidOperationException("Choice value cannot be null");
            _stringChoice = null;
            ChoiceType = ChoiceOf.IntChoice;
        }
    }


    /// <summary>
    /// Creates a new <see cref="AltaSoft.ChoiceGenerator.Tests.TwoDifferentTypeChoice"/> instance and sets its value using the specified <see cref="string"/>.
    /// </summary>
    /// <param name="value">The value to assign to the created choice instance.</param>
    public static AltaSoft.ChoiceGenerator.Tests.TwoDifferentTypeChoice CreateAsStringChoice(string value) => new () { StringChoice = value };

    /// <summary>
    /// Creates a new <see cref="AltaSoft.ChoiceGenerator.Tests.TwoDifferentTypeChoice"/> instance and sets its value using the specified <see cref="int"/>.
    /// </summary>
    /// <param name="value">The value to assign to the created choice instance.</param>
    public static AltaSoft.ChoiceGenerator.Tests.TwoDifferentTypeChoice CreateAsIntChoice(int value) => new () { IntChoice = value };

    /// <summary>
    /// <para>Applies the appropriate function based on the current choice type</para>
    /// </summary>
    /// <typeparam name="TResult">The return type of the provided match functions</typeparam>
    /// <param name="matchStringChoice">Function to invoke if the choice is a <see cref="ChoiceOf.StringChoice"/> value</param>
    /// <param name="matchIntChoice">Function to invoke if the choice is a <see cref="ChoiceOf.IntChoice"/> value</param>
    public TResult Match<TResult>(
    	Func<string, TResult> matchStringChoice, 
    	Func<int, TResult> matchIntChoice)
    {
        return ChoiceType switch
        {
            ChoiceOf.StringChoice => matchStringChoice(StringChoice!),
            ChoiceOf.IntChoice => matchIntChoice(IntChoice!.Value),
            _ => throw new InvalidOperationException($"Invalid ChoiceType. '{ChoiceType}'")
        };
    }

    /// <summary>
    /// <para>Applies the appropriate Action based on the current choice type</para>
    /// </summary>
    /// <param name="matchStringChoice">Action to invoke if the choice is a <see cref="ChoiceOf.StringChoice"/> value</param>
    /// <param name="matchIntChoice">Action to invoke if the choice is a <see cref="ChoiceOf.IntChoice"/> value</param>
    public void Switch(
    	Action<string> matchStringChoice, 
    	Action<int> matchIntChoice)
    {
        switch (ChoiceType)
        {
            case ChoiceOf.StringChoice:
                matchStringChoice(StringChoice!);
                return;

            case ChoiceOf.IntChoice:
                matchIntChoice(IntChoice!.Value);
                return;

            default:
            throw new XmlException($"Invalid ChoiceType. '{ChoiceType}'");
        }
    }

    /// <summary>
    /// Implicitly converts an <see cref="string"/> to an <see cref="TwoDifferentTypeChoice"/>.
    /// </summary>
    /// <param name="value">The <see cref="string"/> to convert.</param>
    /// <returns>
    /// <see cref="TwoDifferentTypeChoice"/> instance representing the code.
    /// </returns>
    public static implicit operator TwoDifferentTypeChoice(string value) => CreateAsStringChoice(value);

    /// <summary>
    /// Implicitly converts an <see cref="int"/> to an <see cref="TwoDifferentTypeChoice"/>.
    /// </summary>
    /// <param name="value">The <see cref="int"/> to convert.</param>
    /// <returns>
    /// <see cref="TwoDifferentTypeChoice"/> instance representing the code.
    /// </returns>
    public static implicit operator TwoDifferentTypeChoice(int value) => CreateAsIntChoice(value);

    /// <summary>
    /// <para>Choice enumeration</para>
    /// </summary>
    [XmlType("ChoiceOf.TwoDifferentTypeChoice")]
    public enum ChoiceOf
    {
        StringChoice, 
        IntChoice, 
    }
}
