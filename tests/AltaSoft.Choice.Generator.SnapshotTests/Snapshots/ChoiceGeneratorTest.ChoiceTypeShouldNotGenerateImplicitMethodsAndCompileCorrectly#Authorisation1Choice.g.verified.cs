//HintName: Authorisation1Choice.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Choice.Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using TestNamespace;
using AltaSoft.Choice;
using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.Schema;

namespace TestNamespace;

#pragma warning disable CS8774 // Member must have a non-null value when exiting.
#pragma warning disable CS0628 // New protected member declared in sealed type

public sealed partial class Authorisation1Choice : IXmlSerializable
{
    /// <summary>
    /// <para>Choice enum </para>
    /// </summary>
    [JsonIgnore]
    public ChoiceOf ChoiceType { get; private set; }

    private string? _code;

    /// <summary>
    /// Specifies the authorisation, in a coded form.
    /// </summary>
    [DisallowNull]
    public partial string? Code
    {
        get => _code;
        set
        {
            _code = value ?? throw new InvalidOperationException("Choice value cannot be null");
            _proprietary = null;
            ChoiceType = ChoiceOf.Code;
        }
    }

    private static readonly XmlSerializer s_codeSerializer = new (typeof(string), new XmlRootAttribute("Code"));
    private string? _proprietary;

    /// <summary>
    /// Specifies the authorisation, in a free text form.
    /// </summary>
    [DisallowNull]
    public partial string? Proprietary
    {
        get => _proprietary;
        set
        {
            _proprietary = value ?? throw new InvalidOperationException("Choice value cannot be null");
            _code = null;
            ChoiceType = ChoiceOf.Proprietary;
        }
    }

    private static readonly XmlSerializer s_proprietarySerializer = new (typeof(string), new XmlRootAttribute("Proprietary"));

    /// <summary>
    /// Creates a new <see cref="TestNamespace.Authorisation1Choice"/> instance and sets its value using the specified <see cref="string"/>.
    /// </summary>
    /// <param name="value">The value to assign to the created choice instance.</param>
    public static TestNamespace.Authorisation1Choice CreateAsCode(string value) => new () { Code = value };

    /// <summary>
    /// Creates a new <see cref="TestNamespace.Authorisation1Choice"/> instance and sets its value using the specified <see cref="string"/>.
    /// </summary>
    /// <param name="value">The value to assign to the created choice instance.</param>
    public static TestNamespace.Authorisation1Choice CreateAsProprietary(string value) => new () { Proprietary = value };

    /// <summary>
    /// <para>Applies the appropriate function based on the current choice type</para>
    /// </summary>
    /// <typeparam name="TResult">The return type of the provided match functions</typeparam>
    /// <param name="matchCode">Function to invoke if the choice is a <see cref="ChoiceOf.Code"/> value</param>
    /// <param name="matchProprietary">Function to invoke if the choice is a <see cref="ChoiceOf.Proprietary"/> value</param>
    public TResult Match<TResult>(
    	Func<string, TResult> matchCode, 
    	Func<string, TResult> matchProprietary)
    {
        return ChoiceType switch
        {
            ChoiceOf.Code => matchCode(Code!),
            ChoiceOf.Proprietary => matchProprietary(Proprietary!),
            _ => throw new InvalidOperationException($"Invalid ChoiceType. '{ChoiceType}'")
        };
    }

    /// <summary>
    /// <para>Applies the appropriate Action based on the current choice type</para>
    /// </summary>
    /// <param name="matchCode">Action to invoke if the choice is a <see cref="ChoiceOf.Code"/> value</param>
    /// <param name="matchProprietary">Action to invoke if the choice is a <see cref="ChoiceOf.Proprietary"/> value</param>
    public void Switch(
    	Action<string> matchCode, 
    	Action<string> matchProprietary)
    {
        switch (ChoiceType)
        {
            case ChoiceOf.Code:
                matchCode(Code!);
                return;

            case ChoiceOf.Proprietary:
                matchProprietary(Proprietary!);
                return;

            default:
            throw new XmlException($"Invalid ChoiceType. '{ChoiceType}'");
        }
    }

    /// <inheritdoc/>
    public XmlSchema? GetSchema() => null;

    /// <inheritdoc/>
    public void ReadXml(XmlReader reader)
    {
        ArgumentNullException.ThrowIfNull(reader);

        reader.MoveToContent();

        if (reader.IsEmptyElement)
        	throw new XmlException("Authorisation1Choice element must contain exactly one of <Code> or <Proprietary>.");

        reader.ReadStartElement();

        var sawChoice = false;
        while (reader.MoveToContent() == XmlNodeType.Element)
        {
            if (sawChoice)
            	throw new XmlException("Authorisation1Choice must contain at most one of <Code> or <Proprietary>.");

            switch (reader.LocalName)
            {
                case "Code":
                    Code = (string)(s_codeSerializer.Deserialize(reader) ?? throw new XmlException(" The value of Code cannot be null"));
                    sawChoice = true;
                    break;

                case "Proprietary":
                    Proprietary = (string)(s_proprietarySerializer.Deserialize(reader) ?? throw new XmlException(" The value of Proprietary cannot be null"));
                    sawChoice = true;
                    break;

                default:
                    reader.Skip();
                    break;
            }
        }

        reader.ReadEndElement();

        if (!sawChoice)
        	throw new XmlException("Authorisation1Choice must contain exactly one of <Code> or <Proprietary>");
    }

    /// <inheritdoc/>
    public void WriteXml(XmlWriter writer)
    {
        ArgumentNullException.ThrowIfNull(writer);

        switch (ChoiceType)
        {
            case ChoiceOf.Code:
                s_codeSerializer.Serialize(writer, Code!, XmlNamespaceHelper.EmptyNamespace);
                break;

            case ChoiceOf.Proprietary:
                s_proprietarySerializer.Serialize(writer, Proprietary!, XmlNamespaceHelper.EmptyNamespace);
                break;

            default:
                throw new InvalidOperationException($"Invalid ChoiceType. '{ChoiceType}'");
        }
    }


    /// <summary>
    /// <para>Choice enumeration</para>
    /// </summary>
    [Serializable]
    public enum ChoiceOf
    {
        /// <summary>
        /// Specifies the authorisation, in a coded form.
        /// </summary>
        Code, 
        /// <summary>
        /// Specifies the authorisation, in a free text form.
        /// </summary>
        Proprietary, 
    }
}
