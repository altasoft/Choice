//HintName: Authorisation1Choice.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Choice.Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using TestNamespace;
using System;
using System.ComponentModel;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml.Serialization;


namespace TestNamespace;

public sealed partial class Authorisation1Choice
{

    /// <summary>
    /// <para> Choice element. One of: <list type="bullet"/> <para><item><term>Cd</term></item><description>Code <see cref = "TestNamespace.Authorisation1Code"/></description> - Specifies the authorisation, in a coded form.  </para><para><item><term>Prtry</term></item><description>Proprietary <see cref = "string"/></description> - Specifies the authorisation, in a free text form.  </para> </para>
    /// </summary>
    [XmlElement("Cd", typeof(TestNamespace.Authorisation1Code))]
    [XmlElement("Prtry", typeof(string))]
    [XmlChoiceIdentifier(nameof(ChoiceType))]
    [JsonIgnore]
    [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
    public object Item { get; set; } = default!;

    /// <summary>
    /// <para>Choice enum </para>
    /// </summary>
    [XmlIgnore]
    [JsonIgnore]
    public ChoiceOf ChoiceType { get; set; }

    /// <summary>
    /// Specifies the authorisation, in a coded form.
    /// </summary>
    [XmlIgnore]
    [JsonInclude]
    public partial TestNamespace.Authorisation1Code? Code { get => ChoiceType == ChoiceOf.Code ? GetAsCode() : (TestNamespace.Authorisation1Code?)null; set => SetAsCode(value ?? throw new JsonException("Choice value cannot be null")); }

    /// <summary>
    /// Specifies the authorisation, in a free text form.
    /// </summary>
    [XmlIgnore]
    [JsonInclude]
    public partial string? Proprietary { get => ChoiceType == ChoiceOf.Proprietary ? GetAsProprietary() : (string?)null; set => SetAsProprietary(value ?? throw new JsonException("Choice value cannot be null")); }


    private TestNamespace.Authorisation1Code GetAsCode() => (TestNamespace.Authorisation1Code)Item;

    private void SetAsCode(TestNamespace.Authorisation1Code value)
    {
        Item = value;
        ChoiceType = ChoiceOf.Code;
    }

    /// <summary>
    /// Creates a new <see cref="TestNamespace.Authorisation1Choice"/> instance and sets its value using the specified <see cref="TestNamespace.Authorisation1Code"/>.
    /// </summary>
    /// <param name="value">The value to assign to the created choice instance.</param>
    public static TestNamespace.Authorisation1Choice CreateAsCode(TestNamespace.Authorisation1Code value)
    {
        var instance = new TestNamespace.Authorisation1Choice();
        instance.SetAsCode(value);
        return instance;
    }

    private string GetAsProprietary() => (string)Item;

    private void SetAsProprietary(string value)
    {
        Item = value;
        ChoiceType = ChoiceOf.Proprietary;
    }

    /// <summary>
    /// Creates a new <see cref="TestNamespace.Authorisation1Choice"/> instance and sets its value using the specified <see cref="string"/>.
    /// </summary>
    /// <param name="value">The value to assign to the created choice instance.</param>
    public static TestNamespace.Authorisation1Choice CreateAsProprietary(string value)
    {
        var instance = new TestNamespace.Authorisation1Choice();
        instance.SetAsProprietary(value);
        return instance;
    }

    /// <summary>
    /// <para>Applies the appropriate function based on the current choice type</para>
    /// </summary>
    /// <typeparam name="TResult">The return type of the provided match functions</typeparam>
    /// <param name="matchCode">Function to invoke if the choice is a <see cref="ChoiceOf.Code"/> value</param>
    /// <param name="matchProprietary">Function to invoke if the choice is a <see cref="ChoiceOf.Proprietary"/> value</param>
    public TResult Match<TResult>(
    	Func<TestNamespace.Authorisation1Code, TResult> matchCode, 
    	Func<string, TResult> matchProprietary)
    {
        if(ChoiceType == ChoiceOf.Code)
        	return matchCode(Code!.Value);

        if(ChoiceType == ChoiceOf.Proprietary)
        	return matchProprietary(Proprietary!);

        throw new InvalidOperationException($"Invalid ChoiceType. '{ChoiceType}'");
    }

    /// <summary>
    /// <para>Applies the appropriate Action based on the current choice type</para>
    /// </summary>
    /// <param name="matchCode">Action to invoke if the choice is a <see cref="ChoiceOf.Code"/> value</param>
    /// <param name="matchProprietary">Action to invoke if the choice is a <see cref="ChoiceOf.Proprietary"/> value</param>
    public void Switch(
    	Action<TestNamespace.Authorisation1Code> matchCode, 
    	Action<string> matchProprietary)
    {
        if(ChoiceType == ChoiceOf.Code!)
        {
            matchCode(Code!.Value);
            return;
        }

        if(ChoiceType == ChoiceOf.Proprietary!)
        {
            matchProprietary(Proprietary!);
            return;
        }

        throw new InvalidOperationException($"Invalid ChoiceType. '{ChoiceType}'");
    }

    /// <summary>
    /// <para>Choice enumeration</para>
    /// </summary>
    [Serializable]
    [XmlType("Authorisation1Choice__ChoiceOf")]
    public enum ChoiceOf
    {
        /// <summary>
        /// Specifies the authorisation, in a coded form.
        /// </summary>
        [XmlEnum("Cd")]
        Code, 
        /// <summary>
        /// Specifies the authorisation, in a free text form.
        /// </summary>
        [XmlEnum("Prtry")]
        Proprietary, 
    }
}
